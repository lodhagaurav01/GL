https://leetcode.com/problems/binary-tree-inorder-traversal/


sol:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sam(self,root):
        if root:
            self.sam(root.left)
            self.result.append(root.val)
            self.sam(root.right)
            
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        self.result=[]
        self.sam(root)
        return self.result
 -----------------------------------------------
 
 
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        else: return self.inorderTraversal(root.left)+ [root.val] +self.inorderTraversal(root.right)
