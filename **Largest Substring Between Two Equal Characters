/*Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.
Example 2:

Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".
Example 3:

Input: s = "cbzxy"
Output: -1
Explanation: There are no characters that appear twice in s.
Example 4:

Input: s = "cabbac"
Output: 4
Explanation: The optimal substring here is "abba". Other non-optimal substrings include "bb" and "".
 

Constraints:

1 <= s.length <= 300
s contains only lowercase English letters.

*/
----------------------------------------------


int maxLengthBetweenEqualCharacters(string s) {
    int idx[26] = {}, res = -1;
    for (auto i = 0; i < s.size(); ++i) {
        if (idx[s[i] - 'a'] == 0)
            idx[s[i] - 'a'] = i + 1;
        res = max(res, i - idx[s[i] - 'a']);
    }
    return res;
}

=========================================================
class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        last, ans = {}, -1 
        for i, c in enumerate(s):
            if c not in last:
                last[c] = i
            else:
                ans = max(ans, i - last[c] - 1)
        return ans 
