Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Note:

The input string length won't exceed 1000.

====================================================

class Solution:
    def countSubstrings(self, s: str) -> int:
        
        res=[s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1)]
        c=0
        for i in res:
            if i==str(i)[::-1]:
                c+=1
        return c        
        
        
  ================================================================
  
  class Solution:
    def countSubstrings(self, S: str) -> int:
        ans, n, i = 0, len(S), 0
        while (i < n):
            j, k = i - 1, i
            while k < n - 1 and S[k] == S[k+1]: k += 1                
            ans += (k - j) * (k - j + 1) // 2
            i, k = k + 1, k + 1
            while ~j and k < n and S[k] == S[j]:
                j, k, ans = j - 1, k + 1, ans + 1
        return ans
        
        =====================================================
        
        class Solution:
    def countSubstrings(self, s: str) -> int:
        '''
        a 1 -> start at i-1, i+1 -> break
        aa 1 -> start at i+1
        
        a 1
        aaa 1 -> start at i-1, i+1
        aa 1 -> start at i, i+1
        
        a 1 -> start at i-1, i+1 -> break, start at i+1, break
        '''
        count = len(s)
        
        for i in range(len(s)):
            count += self.countPalindromes(s, i, i+1)
            count += self.countPalindromes(s, i-1, i+1)
            
        return count
        
        
        
    def countPalindromes(self, s, l, r):
        count = 0
        while l>=0 and r<len(s) and s[l]==s[r]:
            count += 1
            l -= 1
            r += 1
        
        return count
