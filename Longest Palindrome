Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, "Aa" is not considered a palindrome here.

 

Example 1:

Input: s = "abccccdd"
Output: 7
Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.
Example 2:

Input: s = "a"
Output: 1
Example 3:

Input: s = "bb"
Output: 2
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase and/or uppercase English letters only.







=========================================================
class Solution:
    def longestPalindrome(self, s: str) -> int:
        s_dic = collections.Counter(s)
        cnt = 0
        odd = 0
        for _, value in s_dic.items():
            if value % 2 == 0:
                cnt += value
            else:
                cnt += value -1
                odd += 1
        if len(s_dic) == 1:
            return len(s)
        print(s_dic)
        return cnt + 1 if odd else cnt
        
  ========================================================  
  
  
  from collections import Counter as c
class Solution:
    def longestPalindrome(self, s: str) -> int:
        d={}
        cnt=0
        for i in s:
            if i in d:
                d[i]+=1
                if d[i]%2==0:
                    cnt+=2
            else:
                d[i]=1
        if cnt==len(s):
            return cnt
        return cnt+1
        
  =============================================
  
  class Solution {
public:
    int longestPalindrome(string s) {
        unordered_map<char,int> map;
        for(int i=0;i<s.length();i++){
            map[s[i]]++;
        }
        int cnt=0;
        for(auto i:map){
            if(i.second%2!=0){
                cnt++;
            }
        }
        if(cnt>1){
            return s.length()-cnt+1;
        }
        return s.length();
    }
}
