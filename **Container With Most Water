/*

Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
Example 3:

Input: height = [4,3,2,1,4]
Output: 16
Example 4:

Input: height = [1,2,1]
Output: 2
 

Constraints:

n == height.length
2 <= n <= 3 * 104
0 <= height[i] <= 3 * 104

===============================================

class Solution:
    def maxArea(self, height: List[int]) -> int:
        mxa=0
        for i in range(len(height)):
            for j in range(i+1,len(height)):
                m1=j-i
                m2=min(height[i],height[j])
                mxa=max(mxa,m1*m2)
        return mxa        
        [o^n2]
     ============================================================
     
     class Solution {
public:
    int maxArea(vector<int>& height) {
         int i=0,j=height.size()-1;
        int sum =0,area;
        while(i < j)
        {
            area = min(height[i],height[j])* (j-i);
            sum = max(sum , area);
            if(height[i] < height[j])
            {
                i++;
            }
            else if(height[i] > height[j])
            {
                j--;
            }
            else
            {
                i++;
            }
        }
        return sum;
        
        
    }
};
=========================================================================
     
     class Solution:
    def maxArea(self, height: List[int]) -> int:
        mxa=0
        l,r=0,len(height)-1
        
        while l<r:
            mx1=(r-l)*min(height[l],height[r])
            mxa=max(mx1,mxa)
            if height[l]< height[r]:
                l=l+1
            else:
                r=r-1
        return mxa        
        [O(n)]
        
