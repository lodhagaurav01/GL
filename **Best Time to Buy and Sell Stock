
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104

===================================================

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        result = float('-Inf')
        min_price = float('+Inf')
        
        
        for price in prices:
            if price < min_price:
                min_price = price
            if price - min_price > result:
                result = price - min_price
                
        return result       
        
        
===============================================

    class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        i = len(prices)-1
        maxValue = prices[i]
        while i >= 1:
            profit = max(profit, maxValue-prices[i-1])
            if prices[i-1] > maxValue:
                maxValue = prices[i-1]
            i -= 1
        return profit       
        
        
   ========================================================
   
   class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        current_min = prices[0]
        top = 0
        
        for price in prices:
            if price < current_min:
                current_min = price
                continue
                
            if price-current_min > top: top=price-current_min
            
        return top
        
        
        
        
