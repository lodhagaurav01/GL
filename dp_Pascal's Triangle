Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30


==========================================================

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        t=[]
        #perv=[1]
        for i in range(1,numRows+1):
            l=[1]*i
            if len(l)>2:
                k=0
                for j in range(1,i-1):
                    l[j]=perv[k]+perv[k+1]
                    k+=1
            perv=l
            t.append(l)
        return t    
            
===========================================================
class Solution:
    def generate(self, num_rows: int) -> List[List[int]]:
        triangle = []

        for row_num in range(num_rows):
            # The first and last row elements are always 1.
            row = [None for _ in range(row_num + 1)]
            row[0], row[-1] = 1, 1

            # Each triangle element is equal to the sum of the elements
            # above-and-to-the-left and above-and-to-the-right.
            for j in range(1, len(row) - 1):
                row[j] = triangle[row_num - 1][j - 1] + triangle[row_num - 1][j]

            triangle.append(row)

        return triangle
        
 ==============================================================       
