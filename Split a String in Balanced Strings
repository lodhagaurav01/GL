/*
Balanced strings are those who have equal quantity of 'L' and 'R' characters.

Given a balanced string s split it in the maximum amount of balanced strings.

Return the maximum amount of splitted balanced strings.

 

Example 1:

Input: s = "RLRRLLRLRL"
Output: 4
Explanation: s can be split into "RL", "RRLL", "RL", "RL", each substring contains same number of 'L' and 'R'.
Example 2:

Input: s = "RLLLLRRRLR"
Output: 3
Explanation: s can be split into "RL", "LLLRRR", "LR", each substring contains same number of 'L' and 'R'.
Example 3:

Input: s = "LLLLRRRR"
Output: 1
Explanation: s can be split into "LLLLRRRR".
Example 4:

Input: s = "RLRRRLLRLL"
Output: 2
Explanation: s can be split into "RL", "RRRLLRLL", since each substring contains an equal number of 'L' and 'R'
 

Constraints:

1 <= s.length <= 1000
s[i] = 'L' or 'R'

*/

//c++ solution

class Solution {
public:
    int balancedStringSplit(string s) {
        int i,r=0,c=0;
        for(i=0;i<s.length();i++)
        {
            if (s[i]=='R')
                r+=1;
            else
                r-=1;
            if (r==0)
                c+=1;
                
        }
     return c;    
    }
};
----------------------------------------------------
// python solution

class Solution {
public:
    int balancedStringSplit(string s) {
        int i,r=0,c=0;
        for(i=0;i<s.length();i++)
        {
            if (s[i]=='R')
                r+=1;
            else
                r-=1;
            if (r==0)
                c+=1;
                
        }
     return c;    
    }
};

------------------------------------------

lass Solution {
    public int balancedStringSplit(String s) {
        int res = 0;
        int counter = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'L') {
                counter++;
            } else {
                counter--;
            }
            if (counter == 0) {
                res++;
            }
        }
        return res;
    }
}

