You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.

Return the sum of all the unique elements of nums.

 

Example 1:

Input: nums = [1,2,3,2]
Output: 4
Explanation: The unique elements are [1,3], and the sum is 4.
Example 2:

Input: nums = [1,1,1,1,1]
Output: 0
Explanation: There are no unique elements, and the sum is 0.
Example 3:

Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

===============================================

from collections import Counter as c
class Solution:
    def sumOfUnique(self, nums: List[int]) -> int:
        sumUnique = 0 #To store the sum of unique values
        for i in set(nums): #taking set(nums) to reduce the number of iterations
            if nums.count(i) == 1: #If i's count is equal to 1 then we will increase the sum
                sumUnique += i
        return sumUnique   
        
        
     ====================================================================
     
     from collections import Counter as c
class Solution:
    def sumOfUnique(self, nums: List[int]) -> int:
        d=c(nums)
        s=0
        for x in d.keys():
            if d[x]==1:
                s+=x
        return s    
        
        
        
