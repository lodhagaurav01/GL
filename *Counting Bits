Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

Example 1:

Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 

Constraints:

0 <= n <= 105




============================================

class Solution:
    def countBits(self, n: int) -> List[int]:
        counter = [0]
        
        for i in range(1, n+1):
            counter.append(counter[i >> 1] + i % 2)
            
        return counter
=================================================
class Solution:
    def countBits(self, n: int) -> List[int]:
        l=[]
        for i in range(n+1):
            t=bin(i).count('1')
            
            l.append(t)
        return l    
            
            
  =============================================== 
  
  class Solution:
    def countBits(self, num: int) -> List[int]:
        
        res = [0]
        while len(res) <= num:
            res += [i+1 for i in res]
        return res[:num+1]
        
        ============================================
        
        
        class Solution {
public:
    vector<int> countBits(int n) 
    {
         vector<int> result;
         int a[100000];	     
             a[0]=0;
             a[1]=1; 
            a[2]=1;
    
	for (int i=3;i<=n;i++)
	{
		if (i%2==0)
			a[i]=a[i/2];
		else
			a[i]=a[i/2]+1;
	}
	for (int i=0;i<=n;i++)
	{
		result.push_back(a[i]);
	}   
        return result;
    }
};
=============================================================



