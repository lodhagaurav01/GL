Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
Example 3:

Input: root = []
Output: 0
Example 4:

Input: root = [0]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100



===========================================================

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        def BFS(root):
            depth=1
            queue=[root]
            nxt_lvl=[]
            while queue:
                r=queue.pop()
                if r:
                    if r.left:
                        nxt_lvl.append(r.left)
                    if r.right:
                        nxt_lvl.append(r.right) 
                if not queue and nxt_lvl:
                    depth+=1
                    queue=nxt_lvl
                    nxt_lvl=[]
            return depth
        return BFS(root)
            
====================================================

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        self.depth=0
        def DFS(root,curr_node):
            if root:
                curr_node+=1
                self.depth=max(self.depth,curr_node)
                DFS(root.left,curr_node)
                DFS(root.right,curr_node)
            else:
                curr_node-=1
             
        DFS(root,0)
        return self.depth 
        
        
  =============================================
  
  class Solution {
public:
int maxDepth(TreeNode* root) {
if(root == NULL){
return 0;
}
int ld = maxDepth(root->left);
int rd = maxDepth(root->right);
return 1 + max(ld, rd);
}
};

=======================================




